// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      String?   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isEmployee Boolean? @default(false)
  OwnerAt  Store?
  subscriptionId  String?
  subscription SubscriptionList? @relation(fields: [subscriptionId], references: [id])
  EmployeeDetail Employee?
  UserDetails UserDetails?
  paymentHistories PaymentHistory[]
}
  

model SubscriptionList {
  id String @id @default(cuid())
  name String
  price Float
  currency String @default("USD")
  description String?
  durationValue Int @default(1)
  durationUnit String @default("months")
  features String[]
  status String @default("active")
  subscribersCount Int @default(0)
  totalRevenue Float @default(0)
  users User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  paymentHistories PaymentHistory[]
}


model UserDetails {
  id String @id @default(cuid())
  userId String @unique
  name      String?
  imageProfile String?
  phoneNumber String?
  address String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Store {
  id String @id @default(cuid())
  userId String @unique
  products Product[]
  employees Employee[]
  address String?
  name String
  User User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Employee {
  id String @id @default(cuid())
  userId String @unique
  User User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  StoreId String
  Store Store @relation(fields: [StoreId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  attendance Attendance[]
  updatedAt DateTime @updatedAt
}

model Product {
  id String @id @default(cuid())
  name String
  description String?
  price Float
  StoreId String
  Store Store @relation(fields: [StoreId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  HistorySales HistorySale[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HistorySale {
  id String @id @default(cuid())
  productId String
  EmployeeId String
  totalProduct Float
  paymentMethod String?
  totalPrice Float
  Product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attendance {
  id String @id @default(cuid())
  employeeId String
  date DateTime
  status String
  image String?
  Employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentHistory {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subscriptionId String
  subscription SubscriptionList @relation(fields: [subscriptionId], references: [id])
  orderId String @unique
  paymentId String?
  amount Float
  currency String
  paymentMethod String
  status String
  transactionTime DateTime?
  expiryTime DateTime?
  vaNumber String?
  bank String?
  qrCode String?
  redirectUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}